import("//Source/JavaScriptCore/inspector.gni")
import("//Source/JavaScriptCore/jsc.gni")
import("//Source/JavaScriptCore/llint_asm.gni")
import("//Source/JavaScriptCore/object_lut.gni")
import("//Source/JavaScriptCore/offline_asm.gni")
import("//build/config/perl/perl.gni")
import("//build/config/ruby/ruby.gni")
import("//build/config/ui.gni")

bytecodes_h = "$target_gen_dir/Bytecodes.h"
init_bytecodes_asm = "$target_gen_dir/InitBytecodes.asm"
bytecode_structs_h = "$target_gen_dir/BytecodeStructs.h"
bytecode_indices_h = "$target_gen_dir/BytecodeIndices.h"
wasm_llint_generator_h = "$target_gen_dir/WasmLLIntGeneratorInlines.h"
init_wasm_llint = "$target_gen_dir/InitWasm.asm"
bytecode_dumper = "$target_gen_dir/BytecodeDumperGenerated.cpp"

inspector_cpp_files = [
  "$target_gen_dir/inspector/InspectorBackendDispatchers.cpp",
  "$target_gen_dir/inspector/InspectorBackendDispatchers.h",
  "$target_gen_dir/inspector/InspectorFrontendDispatchers.cpp",
  "$target_gen_dir/inspector/InspectorFrontendDispatchers.h",
  "$target_gen_dir/inspector/InspectorProtocolObjects.cpp",
  "$target_gen_dir/inspector/InspectorProtocolObjects.h",
]

llint_settings_extractor_exe = "llint_settings_extractor"
llint_offsets_extractor_exe = "llint_offsets_extractor"
if (is_win) {
  llint_settings_extractor_exe += ".exe"
  llint_offsets_extractor_exe += ".exe"
}

ruby("bytecodes") {
  script = "generator/main.rb"

  inputs = [
    "generator/Argument.rb",
    "generator/Assertion.rb",
    "generator/Checkpoints.rb",
    "generator/DSL.rb",
    "generator/Fits.rb",
    "generator/GeneratedFile.rb",
    "generator/Metadata.rb",
    "generator/Opcode.rb",
    "generator/OpcodeGroup.rb",
    "generator/Options.rb",
    "generator/Section.rb",
    "generator/Template.rb",
    "generator/Type.rb",
    "generator/Wasm.rb",
    "bytecode/BytecodeList.rb",
    "wasm/wasm.json",
  ]

  outputs = [
    "$bytecodes_h",
    "$bytecode_structs_h",
    "$bytecode_indices_h",
    "$wasm_llint_generator_h",
    "$init_wasm_llint",
    "$bytecode_dumper",
    "$init_bytecodes_asm",
  ]

  args = [
    "--bytecodes_h",
    rebase_path(bytecodes_h, root_build_dir),
    "--init_bytecodes_asm",
    rebase_path(init_bytecodes_asm, root_build_dir),
    "--bytecode_structs_h",
    rebase_path(bytecode_structs_h, root_build_dir),
    "--bytecode_indices_h",
    rebase_path(bytecode_indices_h, root_build_dir),
    rebase_path("bytecode/BytecodeList.rb", root_build_dir),
    "--wasm_json",
    rebase_path("wasm/wasm.json", root_build_dir),
    "--wasm_llint_generator_h",
    rebase_path(wasm_llint_generator_h, root_build_dir),
    "--init_wasm_llint",
    rebase_path(init_wasm_llint, root_build_dir),
    "--bytecode_dumper",
    rebase_path(bytecode_dumper, root_build_dir),
  ]
}

ruby("llint_settings") {
  script = "offlineasm/generate_settings_extractor.rb"
  inputs = llint_asm + offline_asm

  outputs = [ "$target_gen_dir/LLIntDesiredSettings.h" ]

  args = [
    "-I" + rebase_path(target_gen_dir, root_build_dir),
    rebase_path("llint/LowLevelInterpreter.asm", root_build_dir),
    rebase_path("$target_gen_dir/LLIntDesiredSettings.h", root_build_dir),
    offline_asm_backend,
  ]

  deps = [ ":bytecodes" ]
}

executable("llint_settings_extractor") {
  sources = [ "llint/LLIntSettingsExtractor.cpp" ]

  deps = [
    ":bytecodes",
    ":llint_settings",
    "//Source/WTF/wtf",
    "//build:cmake_buildflags",
  ]

  include_dirs = [
    "$target_gen_dir",
    "//Source/JavaScriptCore",
    "//Source/JavaScriptCore/runtime",
    "//Source/JavaScriptCore/bytecode",
    "//Source/JavaScriptCore/llint",
    "//Source/JavaScriptCore/heap",
    "//Source/JavaScriptCore/assembler",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

executable("llint_offsets_extractor") {
  sources = [ "llint/LLIntOffsetsExtractor.cpp" ]

  deps = [
    ":bytecodes",
    ":llint_offsets",
    "//Source/WTF/wtf",
    "//build:cmake_buildflags",
  ]

  include_dirs = [
    "$target_gen_dir",
    "//Source/JavaScriptCore",
    "//Source/JavaScriptCore/API",
    "//Source/JavaScriptCore/runtime",
    "//Source/JavaScriptCore/jit",
    "//Source/JavaScriptCore/b3",
    "//Source/JavaScriptCore/dfg",
    "//Source/JavaScriptCore/bytecode",
    "//Source/JavaScriptCore/parser",
    "//Source/JavaScriptCore/llint",
    "//Source/JavaScriptCore/heap",
    "//Source/JavaScriptCore/interpreter",
    "//Source/JavaScriptCore/assembler",
    "//Source/JavaScriptCore/tools",
    "//Source/JavaScriptCore/wasm",
    "//Source/JavaScriptCore/wasm/js",
    "//Source/JavaScriptCore/bytecompiler",
    "//Source/JavaScriptCore/yarr",
    "//Source/JavaScriptCore/profiler",
    "//Source/JavaScriptCore/domjit",
    "//Source/JavaScriptCore/debugger",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

ruby("air_opcode_generator") {
  script = "b3/air/opcode_generator.rb"
  inputs = [ "b3/air/AirOpcode.opcodes" ]

  outputs = [
    "$root_build_dir/AirOpcode.h",
    "$root_build_dir/AirOpcodeGenerated.h",
    "$root_build_dir/AirOpcodeUtils.h",
  ]

  args = [ rebase_path("b3/air/AirOpcode.opcodes", root_build_dir) ]
}

copy("air_opcode") {
  sources = get_target_outputs(":air_opcode_generator")

  outputs = [ "$target_gen_dir/{{source_file_part}}" ]

  deps = [ ":air_opcode_generator" ]
}

action("wasm_op_generator") {
  script = "wasm/generateWasmOpsHeader.py"

  inputs = [
    "wasm/generateWasm.py",
    "wasm/wasm.json",
  ]

  outputs = [ "$root_build_dir/WasmOps.h" ]

  args = [
    rebase_path("wasm/wasm.json", root_build_dir),
    "WasmOps.h",
  ]
}

copy("wasm_op") {
  sources = get_target_outputs(":wasm_op_generator")

  outputs = [ "$target_gen_dir/{{source_file_part}}" ]

  deps = [ ":wasm_op_generator" ]
}

ruby("llint_offsets") {
  script = "offlineasm/generate_offset_extractor.rb"
  inputs = llint_asm + offline_asm

  outputs = [ "$target_gen_dir/LLIntDesiredOffsets.h" ]

  deps = [
    ":air_opcode",
    ":bytecodes",
    ":llint_settings_extractor",
  ]

  args = [
    "-I" + rebase_path(target_gen_dir, root_build_dir),
    rebase_path("llint/LowLevelInterpreter.asm", root_build_dir),
    llint_settings_extractor_exe,
    rebase_path("$target_gen_dir/LLIntDesiredOffsets.h", root_build_dir),
    offline_asm_backend,
    "normal",
  ]
}

action("js_builtin") {
  script = "Scripts/generate-js-builtins.py"

  inputs = [
    "Scripts/wkbuiltins/wkbuiltins.py",
    "Scripts/wkbuiltins/builtins_generator.py",
    "Scripts/wkbuiltins/builtins_model.py",
    "Scripts/wkbuiltins/builtins_templates.py",
    "Scripts/wkbuiltins/builtins_generate_combined_header.py",
    "Scripts/wkbuiltins/builtins_generate_combined_implementation.py",
    "Scripts/wkbuiltins/builtins_generate_separate_header.py",
    "Scripts/wkbuiltins/builtins_generate_separate_implementation.py",
    "Scripts/wkbuiltins/builtins_generate_wrapper_header.py",
    "Scripts/wkbuiltins/builtins_generate_wrapper_implementation.py",
    "Scripts/wkbuiltins/builtins_generate_internals_wrapper_header.py",
    "Scripts/wkbuiltins/builtins_generate_internals_wrapper_implementation.py",
    "Scripts/lazywriter.py",
  ]

  inputs += builtin_sources

  outputs = [
    "$target_gen_dir/JSCBuiltins.h",
    "$target_gen_dir/JSCBuiltins.cpp",
  ]

  args = [
           "--framework",
           "JavaScriptCore",
           "--output-directory",
           rebase_path("$target_gen_dir", root_build_dir),
           "--combined",
         ] + rebase_path(builtin_sources, root_build_dir)
}

ruby("offlineasm_asm_generator") {
  script = "offlineasm/asm.rb"

  inputs = llint_asm + offline_asm

  outputs = [ "$root_build_dir/LLIntAssembly.h" ]

  args = [
    "-I" + rebase_path(target_gen_dir, root_build_dir),
    rebase_path("llint/LowLevelInterpreter.asm", root_build_dir),
    llint_offsets_extractor_exe,
    "LLIntAssembly.h",
    "normal",
  ]
  if (is_linux) {
    args += [ "--binary-format=ELF" ]
  }

  deps = [
    ":bytecodes",
    ":llint_offsets_extractor",
  ]
}

copy("offlineasm_asm") {
  sources = get_target_outputs(":offlineasm_asm_generator")

  outputs = [ "$target_gen_dir/{{source_file_part}}" ]

  deps = [ ":offlineasm_asm_generator" ]
}

source_set("low_level_interpreter") {
  sources = [ "llint/LowLevelInterpreter.cpp" ]
  sources += get_target_outputs(":offlineasm_asm")

  deps = [
    ":offlineasm_asm",
    "//Source/WTF/wtf",
  ]

  configs -= [
    "//build/config/compiler:chromium_code",
    "//build/config/clang:extra_warnings",
  ]
  configs += [ "//build/config/compiler:no_chromium_code" ]

  include_dirs = [
    "$target_gen_dir",
    "$root_gen_dir/build",
    "//Source/JavaScriptCore",
    "//Source/JavaScriptCore/runtime",
    "//Source/JavaScriptCore/API",
    "//Source/JavaScriptCore/assembler",
    "//Source/JavaScriptCore/b3",
    "//Source/JavaScriptCore/b3/air",
    "//Source/JavaScriptCore/bindings",
    "//Source/JavaScriptCore/builtins",
    "//Source/JavaScriptCore/bytecode",
    "//Source/JavaScriptCore/bytecompiler",
    "//Source/JavaScriptCore/dfg",
    "//Source/JavaScriptCore/disassembler",
    "//Source/JavaScriptCore/disassembler/ARM64",
    "//Source/JavaScriptCore/disassembler/zydis/Zydis",
    "//Source/JavaScriptCore/domjit",
    "//Source/JavaScriptCore/ftl",
    "//Source/JavaScriptCore/fuzzilli",
    "//Source/JavaScriptCore/heap",
    "//Source/JavaScriptCore/debugger",
    "//Source/JavaScriptCore/inspector",
    "//Source/JavaScriptCore/inspector/agents",
    "//Source/JavaScriptCore/inspector/augmentable",
    "//Source/JavaScriptCore/inspector/remote",
    "//Source/JavaScriptCore/interpreter",
    "//Source/JavaScriptCore/jit",
    "//Source/JavaScriptCore/llint",
    "//Source/JavaScriptCore/parser",
    "//Source/JavaScriptCore/profiler",
    "//Source/JavaScriptCore/runtime",
    "//Source/JavaScriptCore/tools",
    "//Source/JavaScriptCore/wasm",
    "//Source/JavaScriptCore/wasm/js",
    "//Source/JavaScriptCore/yarr",
    "//Source/JavaScriptCore",
    "//Source/JavaScriptCore/inspector",
    "//Source/JavaScriptCore/runtime",
    "//Source/JavaScriptCore/yarr",
    "$target_gen_dir/inspector",
    "$target_gen_dir/runtime",
    "$target_gen_dir/yarr",
  ]
}

action("wasm_omgir_generator_inlines_generator") {
  script = "wasm/generateWasmOMGIRGeneratorInlinesHeader.py"
  inputs = [ "wasm/generateWasm.py" ]

  outputs = [ "$root_build_dir/WasmOMGIRGeneratorInlines.h" ]

  args = [
    rebase_path("wasm/wasm.json", root_build_dir),
    "WasmOMGIRGeneratorInlines.h",
  ]
}

copy("wasm_omgir_generator_inlines") {
  sources = get_target_outputs(":wasm_omgir_generator_inlines_generator")

  outputs = [ "$target_gen_dir/{{source_file_part}}" ]

  deps = [ ":wasm_omgir_generator_inlines_generator" ]
}

action("reg_exp_jit_tables_generator") {
  script = "yarr/create_regex_tables"

  outputs = [ "$target_gen_dir/yarr/RegExpJitTables.h" ]

  args =
      [ rebase_path("$target_gen_dir/yarr/RegExpJitTables.h", root_build_dir) ]
}

action("unicode_pattern_tables_generator") {
  script = "yarr/generateYarrUnicodePropertyTables.py"

  inputs = [
    "yarr/hasher.py",

    "ucd/DerivedBinaryProperties.txt",
    "ucd/DerivedCoreProperties.txt",
    "ucd/DerivedNormalizationProps.txt",
    "ucd/PropList.txt",
    "ucd/PropertyAliases.txt",
    "ucd/PropertyValueAliases.txt",
    "ucd/ScriptExtensions.txt",
    "ucd/Scripts.txt",
    "ucd/UnicodeData.txt",
    "ucd/emoji-data.txt",
  ]

  outputs = [ "$target_gen_dir/yarr/UnicodePatternTables.h" ]

  args = [
    rebase_path("ucd", root_build_dir),
    rebase_path("$target_gen_dir/yarr/UnicodePatternTables.h", root_build_dir),
  ]
}

action("yarr_canonicalize_unicode_generator") {
  script = "yarr/generateYarrCanonicalizeUnicode"

  inputs = [ "ucd/CaseFolding.txt" ]

  outputs = [ "$target_gen_dir/yarr/YarrCanonicalizeUnicode.cpp" ]

  args = [
    rebase_path("ucd/CaseFolding.txt", root_build_dir),
    rebase_path("$target_gen_dir/yarr/YarrCanonicalizeUnicode.cpp",
                root_build_dir),
  ]
}

action("keyword_lookup_generator") {
  script = "KeywordLookupGenerator.py"

  inputs = [ "parser/Keywords.table" ]

  outputs = [ "$target_gen_dir/KeywordLookup.h" ]

  args = [
    rebase_path("parser/Keywords.table", root_build_dir),
    rebase_path("$target_gen_dir/KeywordLookup.h", root_build_dir),
  ]
}

action("combined_json_generator") {
  script = "//build/redirect_stdout.py"

  inputs = jsc_inspector_domains

  inputs += [ "Scripts/generate-combined-inspector-json.py" ]

  outputs = [ "$target_gen_dir/CombinedDomains.json" ]

  combined_args = rebase_path(jsc_inspector_domains, root_build_dir)
  combined_args += [ "''" ]

  args = rebase_path(outputs, root_build_dir)

  args += [ rebase_path("Scripts/generate-combined-inspector-json.py",
                        root_build_dir) ]
  args += combined_args
}

action("inspector_protocol_bindings_generator") {
  script = "inspector/scripts/generate-inspector-protocol-bindings.py"

  inputs = jsc_inspector_domains

  outputs = inspector_cpp_files
  outputs += [ "$target_gen_dir/inspector/InspectorBackendCommands.js" ]

  deps = [ ":combined_json_generator" ]

  args = [
    "--outputDir",
    rebase_path("$target_gen_dir/inspector", root_build_dir),
    "--framework",
    "JavaScriptCore",
  ]

  args += rebase_path(get_target_outputs(":combined_json_generator"),
                      root_build_dir)
}

action_foreach("hash_lut") {
  script = "//build/redirect_stdout.py"

  mnemonic = "LUT"

  sources = jsc_object_lut_sources

  inputs = [ "create_hash_table" ]

  outputs = [ "$target_gen_dir/{{source_name_part}}.lut.h" ]

  args = [
    rebase_path("$target_gen_dir/{{source_name_part}}.lut.h", root_build_dir),
    rebase_path(perl_path, root_build_dir),
    rebase_path("create_hash_table", root_build_dir),
    "{{source}}",
  ]
}

action("lexer_lut") {
  script = "//build/redirect_stdout.py"

  sources = jsc_object_lut_sources

  inputs = [ "create_hash_table" ]

  outputs = [ "$target_gen_dir/Lexer.lut.h" ]

  args = [
    rebase_path("$target_gen_dir/Lexer.lut.h", root_build_dir),
    rebase_path(perl_path, root_build_dir),
    rebase_path("create_hash_table", root_build_dir),
    rebase_path("parser/Keywords.table", root_build_dir),
  ]
}

copy("jsc_public_headers") {
  sources = jsc_public_framework_headers
  outputs = [ "$root_gen_dir/JavaScriptCore/{{source_file_part}}" ]
}

config("jsc_public_config") {
  include_dirs = [ "//Source/JavaScriptCore" ]
}

component("jsc") {
  sources = jsc_private_framework_headers

  sources += [
    "API/APIIntegrity.cpp",
    "API/JSAPIGlobalObject.cpp",
    "API/JSAPIValueWrapper.cpp",
    "API/JSBase.cpp",
    "API/JSCTestRunnerUtils.cpp",
    "API/JSCallbackConstructor.cpp",
    "API/JSCallbackFunction.cpp",
    "API/JSCallbackObject.cpp",
    "API/JSClassRef.cpp",
    "API/JSContextRef.cpp",
    "API/JSHeapFinalizerPrivate.cpp",
    "API/JSLockRef.cpp",
    "API/JSMarkingConstraintPrivate.cpp",
    "API/JSObjectRef.cpp",
    "API/JSScriptRef.cpp",
    "API/JSStringRef.cpp",
    "API/JSTypedArray.cpp",
    "API/JSValueRef.cpp",
    "API/JSWeakObjectMapRefPrivate.cpp",
    "API/JSWeakPrivate.cpp",
    "API/JSWeakValue.cpp",
    "API/MarkedJSValueRefArray.cpp",
    "API/OpaqueJSString.cpp",
    "assembler/AbstractMacroAssembler.cpp",
    "assembler/AssemblerBuffer.cpp",
    "assembler/AssemblyComments.cpp",
    "assembler/CPU.cpp",
    "assembler/JITOperationList.cpp",
    "assembler/LinkBuffer.cpp",
    "assembler/MacroAssembler.cpp",
    "assembler/MacroAssemblerARM64.cpp",
    "assembler/MacroAssemblerARMv7.cpp",
    "assembler/MacroAssemblerCodeRef.cpp",
    "assembler/MacroAssemblerPrinter.cpp",
    "assembler/MacroAssemblerRISCV64.cpp",
    "assembler/MacroAssemblerX86Common.cpp",
    "assembler/PerfLog.cpp",
    "assembler/Printer.cpp",
    "assembler/ProbeContext.cpp",
    "assembler/ProbeStack.cpp",
    "assembler/SecureARM64EHashPins.cpp",
    "b3/B3ArgumentRegValue.cpp",
    "b3/B3AtomicValue.cpp",
    "b3/B3Bank.cpp",
    "b3/B3BasicBlock.cpp",
    "b3/B3BlockInsertionSet.cpp",
    "b3/B3BottomTupleValue.cpp",
    "b3/B3BreakCriticalEdges.cpp",
    "b3/B3CCallValue.cpp",
    "b3/B3CanonicalizePrePostIncrements.cpp",
    "b3/B3CaseCollection.cpp",
    "b3/B3CheckSpecial.cpp",
    "b3/B3CheckValue.cpp",
    "b3/B3Common.cpp",
    "b3/B3Commutativity.cpp",
    "b3/B3Compile.cpp",
    "b3/B3Const128Value.cpp",
    "b3/B3Const32Value.cpp",
    "b3/B3Const64Value.cpp",
    "b3/B3ConstDoubleValue.cpp",
    "b3/B3ConstFloatValue.cpp",
    "b3/B3ConstrainedValue.cpp",
    "b3/B3DataSection.cpp",
    "b3/B3DuplicateTails.cpp",
    "b3/B3Effects.cpp",
    "b3/B3EliminateCommonSubexpressions.cpp",
    "b3/B3EliminateDeadCode.cpp",
    "b3/B3EnsureLoopPreHeaders.cpp",
    "b3/B3EstimateStaticExecutionCounts.cpp",
    "b3/B3ExtractValue.cpp",
    "b3/B3FenceValue.cpp",
    "b3/B3FixSSA.cpp",
    "b3/B3FoldPathConstants.cpp",
    "b3/B3FrequencyClass.cpp",
    "b3/B3Generate.cpp",
    "b3/B3HoistLoopInvariantValues.cpp",
    "b3/B3InferSwitches.cpp",
    "b3/B3InsertionSet.cpp",
    "b3/B3Kind.cpp",
    "b3/B3LegalizeMemoryOffsets.cpp",
    "b3/B3LowerMacros.cpp",
    "b3/B3LowerMacrosAfterOptimizations.cpp",
    "b3/B3LowerToAir.cpp",
    "b3/B3MathExtras.cpp",
    "b3/B3MemoryValue.cpp",
    "b3/B3MoveConstants.cpp",
    "b3/B3Opcode.cpp",
    "b3/B3OptimizeAssociativeExpressionTrees.cpp",
    "b3/B3Origin.cpp",
    "b3/B3OriginDump.cpp",
    "b3/B3PatchpointSpecial.cpp",
    "b3/B3PatchpointValue.cpp",
    "b3/B3PhaseScope.cpp",
    "b3/B3PhiChildren.cpp",
    "b3/B3Procedure.cpp",
    "b3/B3PureCSE.cpp",
    "b3/B3ReduceDoubleToFloat.cpp",
    "b3/B3ReduceStrength.cpp",
    "b3/B3SIMDValue.cpp",
    "b3/B3SSACalculator.cpp",
    "b3/B3SlotBaseValue.cpp",
    "b3/B3StackmapGenerationParams.cpp",
    "b3/B3StackmapSpecial.cpp",
    "b3/B3StackmapValue.cpp",
    "b3/B3SwitchCase.cpp",
    "b3/B3SwitchValue.cpp",
    "b3/B3TZoneImpls.cpp",
    "b3/B3Type.cpp",
    "b3/B3UpsilonValue.cpp",
    "b3/B3UseCounts.cpp",
    "b3/B3Validate.cpp",
    "b3/B3Value.cpp",
    "b3/B3ValueKey.cpp",
    "b3/B3ValueRep.cpp",
    "b3/B3Variable.cpp",
    "b3/B3VariableLiveness.cpp",
    "b3/B3VariableValue.cpp",
    "b3/B3WasmAddressValue.cpp",
    "b3/B3WasmBoundsCheckValue.cpp",
    "b3/B3Width.cpp",
    "b3/air/AirAllocateRegistersAndStackAndGenerateCode.cpp",
    "b3/air/AirAllocateRegistersAndStackByLinearScan.cpp",
    "b3/air/AirAllocateRegistersByGraphColoring.cpp",
    "b3/air/AirAllocateStackByGraphColoring.cpp",
    "b3/air/AirArg.cpp",
    "b3/air/AirBasicBlock.cpp",
    "b3/air/AirBlockInsertionSet.cpp",
    "b3/air/AirBreakCriticalEdges.cpp",
    "b3/air/AirCCallSpecial.cpp",
    "b3/air/AirCCallingConvention.cpp",
    "b3/air/AirCode.cpp",
    "b3/air/AirCustom.cpp",
    "b3/air/AirDisassembler.cpp",
    "b3/air/AirEliminateDeadCode.cpp",
    "b3/air/AirEmitShuffle.cpp",
    "b3/air/AirFixObviousSpills.cpp",
    "b3/air/AirFixPartialRegisterStalls.cpp",
    "b3/air/AirFixSpillsAfterTerminals.cpp",
    "b3/air/AirGenerate.cpp",
    "b3/air/AirGenerated.cpp",
    "b3/air/AirHandleCalleeSaves.cpp",
    "b3/air/AirInsertionSet.cpp",
    "b3/air/AirInst.cpp",
    "b3/air/AirKind.cpp",
    "b3/air/AirLogRegisterPressure.cpp",
    "b3/air/AirLowerAfterRegAlloc.cpp",
    "b3/air/AirLowerEntrySwitch.cpp",
    "b3/air/AirLowerMacros.cpp",
    "b3/air/AirLowerStackArgs.cpp",
    "b3/air/AirOptimizeBlockOrder.cpp",
    "b3/air/AirOptimizePairedLoadStore.cpp",
    "b3/air/AirPadInterference.cpp",
    "b3/air/AirPhaseInsertionSet.cpp",
    "b3/air/AirPhaseScope.cpp",
    "b3/air/AirPrintSpecial.cpp",
    "b3/air/AirRegLiveness.cpp",
    "b3/air/AirReportUsedRegisters.cpp",
    "b3/air/AirSimplifyCFG.cpp",
    "b3/air/AirSpecial.cpp",
    "b3/air/AirStackAllocation.cpp",
    "b3/air/AirStackSlot.cpp",
    "b3/air/AirStackSlotKind.cpp",
    "b3/air/AirTZoneImpls.cpp",
    "b3/air/AirTmp.cpp",
    "b3/air/AirTmpWidth.cpp",
    "b3/air/AirValidate.cpp",
    "builtins/BuiltinExecutableCreator.cpp",
    "builtins/BuiltinExecutables.cpp",
    "builtins/BuiltinNames.cpp",
    "bytecode/AccessCase.cpp",
    "bytecode/AccessCaseSnippetParams.cpp",
    "bytecode/AdaptiveInferredPropertyValueWatchpointBase.cpp",
    "bytecode/ArithProfile.cpp",
    "bytecode/ArrayAllocationProfile.cpp",
    "bytecode/ArrayProfile.cpp",
    "bytecode/BytecodeBasicBlock.cpp",
    "bytecode/BytecodeDumper.cpp",
    "bytecode/BytecodeGeneratorification.cpp",
    "bytecode/BytecodeIndex.cpp",
    "bytecode/BytecodeIntrinsicRegistry.cpp",
    "bytecode/BytecodeLivenessAnalysis.cpp",
    "bytecode/BytecodeRewriter.cpp",
    "bytecode/BytecodeUseDef.cpp",
    "bytecode/CallEdge.cpp",
    "bytecode/CallLinkInfo.cpp",
    "bytecode/CallLinkInfoBase.cpp",
    "bytecode/CallLinkStatus.cpp",
    "bytecode/CallMode.cpp",
    "bytecode/CallVariant.cpp",
    "bytecode/CheckPrivateBrandStatus.cpp",
    "bytecode/CheckPrivateBrandVariant.cpp",
    "bytecode/CodeBlock.cpp",
    "bytecode/CodeBlockHash.cpp",
    "bytecode/CodeBlockJettisoningWatchpoint.cpp",
    "bytecode/CodeOrigin.cpp",
    "bytecode/CodeType.cpp",
    "bytecode/ComplexGetStatus.cpp",
    "bytecode/DFGExitProfile.cpp",
    "bytecode/DataFormat.cpp",
    "bytecode/DeferredCompilationCallback.cpp",
    "bytecode/DeferredSourceDump.cpp",
    "bytecode/DeleteByStatus.cpp",
    "bytecode/DeleteByVariant.cpp",
    "bytecode/DirectEvalCodeCache.cpp",
    "bytecode/EvalCodeBlock.cpp",
    "bytecode/ExecutionCounter.cpp",
    "bytecode/ExitFlag.cpp",
    "bytecode/ExitKind.cpp",
    "bytecode/ExitingInlineKind.cpp",
    "bytecode/ExitingJITType.cpp",
    "bytecode/ExpressionInfo.cpp",
    "bytecode/FullCodeOrigin.cpp",
    "bytecode/FunctionCodeBlock.cpp",
    "bytecode/GetByStatus.cpp",
    "bytecode/GetByVariant.cpp",
    "bytecode/GetterSetterAccessCase.cpp",
    "bytecode/ICStatusMap.cpp",
    "bytecode/ICStatusUtils.cpp",
    "bytecode/InByStatus.cpp",
    "bytecode/InByVariant.cpp",
    "bytecode/InlineAccess.cpp",
    "bytecode/InlineCacheCompiler.cpp",
    "bytecode/InlineCallFrame.cpp",
    "bytecode/InlineCallFrameSet.cpp",
    "bytecode/InstanceOfAccessCase.cpp",
    "bytecode/InstanceOfStatus.cpp",
    "bytecode/InstanceOfVariant.cpp",
    "bytecode/InstructionStream.cpp",
    "bytecode/IntrinsicGetterAccessCase.cpp",
    "bytecode/JumpTable.cpp",
    "bytecode/LLIntPrototypeLoadAdaptiveStructureWatchpoint.cpp",
    "bytecode/LazyValueProfile.cpp",
    "bytecode/LinkTimeConstant.cpp",
    "bytecode/MetadataTable.cpp",
    "bytecode/MethodOfGettingAValueProfile.cpp",
    "bytecode/ModuleNamespaceAccessCase.cpp",
    "bytecode/ModuleProgramCodeBlock.cpp",
    "bytecode/ObjectPropertyCondition.cpp",
    "bytecode/ObjectPropertyConditionSet.cpp",
    "bytecode/Opcode.cpp",
    "bytecode/ParseHash.cpp",
    "bytecode/PolyProtoAccessChain.cpp",
    "bytecode/PreciseJumpTargets.cpp",
    "bytecode/ProgramCodeBlock.cpp",
    "bytecode/PropertyCondition.cpp",
    "bytecode/ProxyObjectAccessCase.cpp",
    "bytecode/ProxyableAccessCase.cpp",
    "bytecode/PutByIdFlags.cpp",
    "bytecode/PutByStatus.cpp",
    "bytecode/PutByVariant.cpp",
    "bytecode/RecordedStatuses.cpp",
    "bytecode/ReduceWhitespace.cpp",
    "bytecode/Repatch.cpp",
    "bytecode/SetPrivateBrandStatus.cpp",
    "bytecode/SetPrivateBrandVariant.cpp",
    "bytecode/SharedJITStubSet.cpp",
    "bytecode/SpeculatedType.cpp",
    "bytecode/StructureSet.cpp",
    "bytecode/StructureStubClearingWatchpoint.cpp",
    "bytecode/StructureStubInfo.cpp",
    "bytecode/StubInfoSummary.cpp",
    "bytecode/SuperSampler.cpp",
    "bytecode/ToThisStatus.cpp",
    "bytecode/TrackedReferences.cpp",
    "bytecode/UnlinkedCodeBlock.cpp",
    "bytecode/UnlinkedCodeBlockGenerator.cpp",
    "bytecode/UnlinkedEvalCodeBlock.cpp",
    "bytecode/UnlinkedFunctionCodeBlock.cpp",
    "bytecode/UnlinkedFunctionExecutable.cpp",
    "bytecode/UnlinkedMetadataTable.cpp",
    "bytecode/UnlinkedModuleProgramCodeBlock.cpp",
    "bytecode/UnlinkedProgramCodeBlock.cpp",
    "bytecode/ValueRecovery.cpp",
    "bytecode/VariableWriteFireDetail.cpp",
    "bytecode/VirtualRegister.cpp",
    "bytecode/Watchpoint.cpp",
    "bytecompiler/BytecodeGenerator.cpp",
    "bytecompiler/NodesCodegen.cpp",
    "bytecompiler/ProfileTypeBytecodeFlag.cpp",
    "debugger/Breakpoint.cpp",
    "debugger/Debugger.cpp",
    "debugger/DebuggerCallFrame.cpp",
    "debugger/DebuggerLocation.cpp",
    "debugger/DebuggerParseData.cpp",
    "debugger/DebuggerScope.cpp",
    "dfg/DFGAbstractHeap.cpp",
    "dfg/DFGAbstractInterpreterClobberState.cpp",
    "dfg/DFGAbstractValue.cpp",
    "dfg/DFGAbstractValueClobberEpoch.cpp",
    "dfg/DFGAdaptiveInferredPropertyValueWatchpoint.cpp",
    "dfg/DFGAdaptiveStructureWatchpoint.cpp",
    "dfg/DFGArgumentsEliminationPhase.cpp",
    "dfg/DFGArgumentsUtilities.cpp",
    "dfg/DFGArithMode.cpp",
    "dfg/DFGArrayMode.cpp",
    "dfg/DFGAtTailAbstractState.cpp",
    "dfg/DFGAvailability.cpp",
    "dfg/DFGAvailabilityMap.cpp",
    "dfg/DFGBackwardsPropagationPhase.cpp",
    "dfg/DFGBasicBlock.cpp",
    "dfg/DFGBlockInsertionSet.cpp",
    "dfg/DFGBlockSet.cpp",
    "dfg/DFGByteCodeParser.cpp",
    "dfg/DFGCFAPhase.cpp",
    "dfg/DFGCFGSimplificationPhase.cpp",
    "dfg/DFGCPSRethreadingPhase.cpp",
    "dfg/DFGCSEPhase.cpp",
    "dfg/DFGCapabilities.cpp",
    "dfg/DFGCleanUpPhase.cpp",
    "dfg/DFGClobberSet.cpp",
    "dfg/DFGClobberize.cpp",
    "dfg/DFGClobbersExitState.cpp",
    "dfg/DFGCodeOriginPool.cpp",
    "dfg/DFGCombinedLiveness.cpp",
    "dfg/DFGCommon.cpp",
    "dfg/DFGCommonData.cpp",
    "dfg/DFGConstantFoldingPhase.cpp",
    "dfg/DFGConstantHoistingPhase.cpp",
    "dfg/DFGCriticalEdgeBreakingPhase.cpp",
    "dfg/DFGDCEPhase.cpp",
    "dfg/DFGDesiredGlobalProperties.cpp",
    "dfg/DFGDesiredIdentifiers.cpp",
    "dfg/DFGDesiredTransitions.cpp",
    "dfg/DFGDesiredWatchpoints.cpp",
    "dfg/DFGDesiredWeakReferences.cpp",
    "dfg/DFGDisassembler.cpp",
    "dfg/DFGDoesGC.cpp",
    "dfg/DFGDoesGCCheck.cpp",
    "dfg/DFGDriver.cpp",
    "dfg/DFGEdge.cpp",
    "dfg/DFGEpoch.cpp",
    "dfg/DFGFailedFinalizer.cpp",
    "dfg/DFGFinalizer.cpp",
    "dfg/DFGFixupPhase.cpp",
    "dfg/DFGFlowIndexing.cpp",
    "dfg/DFGFlushFormat.cpp",
    "dfg/DFGFlushedAt.cpp",
    "dfg/DFGFrozenValue.cpp",
    "dfg/DFGGraph.cpp",
    "dfg/DFGGraphSafepoint.cpp",
    "dfg/DFGHeapLocation.cpp",
    "dfg/DFGInPlaceAbstractState.cpp",
    "dfg/DFGInsertionSet.cpp",
    "dfg/DFGIntegerCheckCombiningPhase.cpp",
    "dfg/DFGIntegerRangeOptimizationPhase.cpp",
    "dfg/DFGInvalidationPointInjectionPhase.cpp",
    "dfg/DFGJITCode.cpp",
    "dfg/DFGJITCompiler.cpp",
    "dfg/DFGJITFinalizer.cpp",
    "dfg/DFGJumpReplacement.cpp",
    "dfg/DFGLICMPhase.cpp",
    "dfg/DFGLazyJSValue.cpp",
    "dfg/DFGLazyNode.cpp",
    "dfg/DFGLiveCatchVariablePreservationPhase.cpp",
    "dfg/DFGLivenessAnalysisPhase.cpp",
    "dfg/DFGLoopPreHeaderCreationPhase.cpp",
    "dfg/DFGMayExit.cpp",
    "dfg/DFGMinifiedGraph.cpp",
    "dfg/DFGMinifiedNode.cpp",
    "dfg/DFGMovHintRemovalPhase.cpp",
    "dfg/DFGMultiGetByOffsetData.cpp",
    "dfg/DFGNode.cpp",
    "dfg/DFGNodeAbstractValuePair.cpp",
    "dfg/DFGNodeFlags.cpp",
    "dfg/DFGNodeFlowProjection.cpp",
    "dfg/DFGNodeOrigin.cpp",
    "dfg/DFGOSRAvailabilityAnalysisPhase.cpp",
    "dfg/DFGOSREntry.cpp",
    "dfg/DFGOSREntrypointCreationPhase.cpp",
    "dfg/DFGOSRExit.cpp",
    "dfg/DFGOSRExitBase.cpp",
    "dfg/DFGOSRExitCompilerCommon.cpp",
    "dfg/DFGOSRExitFuzz.cpp",
    "dfg/DFGOSRExitJumpPlaceholder.cpp",
    "dfg/DFGObjectAllocationSinkingPhase.cpp",
    "dfg/DFGObjectMaterializationData.cpp",
    "dfg/DFGOperations.cpp",
    "dfg/DFGPhantomInsertionPhase.cpp",
    "dfg/DFGPhase.cpp",
    "dfg/DFGPhiChildren.cpp",
    "dfg/DFGPlan.cpp",
    "dfg/DFGPredictionInjectionPhase.cpp",
    "dfg/DFGPredictionPropagationPhase.cpp",
    "dfg/DFGPromotedHeapLocation.cpp",
    "dfg/DFGPureValue.cpp",
    "dfg/DFGPutStackSinkingPhase.cpp",
    "dfg/DFGRegisteredStructureSet.cpp",
    "dfg/DFGSSACalculator.cpp",
    "dfg/DFGSSAConversionPhase.cpp",
    "dfg/DFGSSALoweringPhase.cpp",
    "dfg/DFGSnippetParams.cpp",
    "dfg/DFGSpeculativeJIT.cpp",
    "dfg/DFGSpeculativeJIT32_64.cpp",
    "dfg/DFGSpeculativeJIT64.cpp",
    "dfg/DFGStackLayoutPhase.cpp",
    "dfg/DFGStaticExecutionCountEstimationPhase.cpp",
    "dfg/DFGStoreBarrierClusteringPhase.cpp",
    "dfg/DFGStoreBarrierInsertionPhase.cpp",
    "dfg/DFGStrengthReductionPhase.cpp",
    "dfg/DFGStructureAbstractValue.cpp",
    "dfg/DFGTZoneImpls.cpp",
    "dfg/DFGThunks.cpp",
    "dfg/DFGTierUpCheckInjectionPhase.cpp",
    "dfg/DFGToFTLDeferredCompilationCallback.cpp",
    "dfg/DFGToFTLForOSREntryDeferredCompilationCallback.cpp",
    "dfg/DFGTransition.cpp",
    "dfg/DFGTypeCheckHoistingPhase.cpp",
    "dfg/DFGUnificationPhase.cpp",
    "dfg/DFGUseKind.cpp",
    "dfg/DFGValidate.cpp",
    "dfg/DFGValidateUnlinked.cpp",
    "dfg/DFGValueRepReductionPhase.cpp",
    "dfg/DFGValueSource.cpp",
    "dfg/DFGValueStrength.cpp",
    "dfg/DFGVarargsForwardingPhase.cpp",
    "dfg/DFGVariableAccessData.cpp",
    "dfg/DFGVariableAccessDataDump.cpp",
    "dfg/DFGVariableEvent.cpp",
    "dfg/DFGVariableEventStream.cpp",
    "dfg/DFGVirtualRegisterAllocationPhase.cpp",
    "disassembler/ARM64/A64DOpcode.cpp",
    "disassembler/ARM64Disassembler.cpp",
    "disassembler/CapstoneDisassembler.cpp",
    "disassembler/Disassembler.cpp",
    "disassembler/RISCV64Disassembler.cpp",
    "disassembler/X86Disassembler.cpp",
    "disassembler/zydis/Zydis/Zycore.c",
    "disassembler/zydis/Zydis/ZycoreAllocator.c",
    "disassembler/zydis/Zydis/ZycoreBitset.c",
    "disassembler/zydis/Zydis/ZycoreFormat.c",
    "disassembler/zydis/Zydis/ZycoreList.c",
    "disassembler/zydis/Zydis/ZycoreString.c",
    "disassembler/zydis/Zydis/ZycoreVector.c",
    "disassembler/zydis/Zydis/Zydis.c",
    "disassembler/zydis/Zydis/ZydisDecoder.c",
    "disassembler/zydis/Zydis/ZydisDecoderData.c",
    "disassembler/zydis/Zydis/ZydisFormatter.c",
    "disassembler/zydis/Zydis/ZydisFormatterATT.c",
    "disassembler/zydis/Zydis/ZydisFormatterBase.c",
    "disassembler/zydis/Zydis/ZydisFormatterBuffer.c",
    "disassembler/zydis/Zydis/ZydisFormatterIntel.c",
    "disassembler/zydis/Zydis/ZydisMetaInfo.c",
    "disassembler/zydis/Zydis/ZydisMnemonic.c",
    "disassembler/zydis/Zydis/ZydisRegister.c",
    "disassembler/zydis/Zydis/ZydisSharedData.c",
    "disassembler/zydis/Zydis/ZydisString.c",
    "disassembler/zydis/Zydis/ZydisUtils.c",
    "domjit/DOMJITAbstractHeap.cpp",
    "domjit/DOMJITHeapRange.cpp",
    "ftl/FTLAbstractHeap.cpp",
    "ftl/FTLAbstractHeapRepository.cpp",
    "ftl/FTLAvailableRecovery.cpp",
    "ftl/FTLCapabilities.cpp",
    "ftl/FTLCommonValues.cpp",
    "ftl/FTLCompile.cpp",
    "ftl/FTLExceptionTarget.cpp",
    "ftl/FTLExitArgument.cpp",
    "ftl/FTLExitArgumentForOperand.cpp",
    "ftl/FTLExitPropertyValue.cpp",
    "ftl/FTLExitTimeObjectMaterialization.cpp",
    "ftl/FTLExitValue.cpp",
    "ftl/FTLFail.cpp",
    "ftl/FTLForOSREntryJITCode.cpp",
    "ftl/FTLJITCode.cpp",
    "ftl/FTLJITFinalizer.cpp",
    "ftl/FTLLazySlowPath.cpp",
    "ftl/FTLLink.cpp",
    "ftl/FTLLocation.cpp",
    "ftl/FTLLowerDFGToB3.cpp",
    "ftl/FTLOSREntry.cpp",
    "ftl/FTLOSRExit.cpp",
    "ftl/FTLOSRExitCompiler.cpp",
    "ftl/FTLOSRExitHandle.cpp",
    "ftl/FTLOperations.cpp",
    "ftl/FTLOutput.cpp",
    "ftl/FTLPatchpointExceptionHandle.cpp",
    "ftl/FTLRecoveryOpcode.cpp",
    "ftl/FTLSaveRestore.cpp",
    "ftl/FTLSlowPathCall.cpp",
    "ftl/FTLSlowPathCallKey.cpp",
    "ftl/FTLSnippetParams.cpp",
    "ftl/FTLState.cpp",
    "ftl/FTLThunks.cpp",
    "ftl/FTLValueRange.cpp",
    "heap/AlignedMemoryAllocator.cpp",
    "heap/Allocator.cpp",
    "heap/BlockDirectory.cpp",
    "heap/CellAttributes.cpp",
    "heap/CellContainer.cpp",
    "heap/CodeBlockSet.cpp",
    "heap/CollectionScope.cpp",
    "heap/CollectorPhase.cpp",
    "heap/CompleteSubspace.cpp",
    "heap/ConservativeRoots.cpp",
    "heap/DeferGC.cpp",
    "heap/DestructionMode.cpp",
    "heap/EdenGCActivityCallback.cpp",
    "heap/FastMallocAlignedMemoryAllocator.cpp",
    "heap/FreeList.cpp",
    "heap/FullGCActivityCallback.cpp",
    "heap/GCActivityCallback.cpp",
    "heap/GCConductor.cpp",
    "heap/GCLogging.cpp",
    "heap/GCRequest.cpp",
    "heap/GCSegmentedArray.cpp",
    "heap/GigacageAlignedMemoryAllocator.cpp",
    "heap/HandleSet.cpp",
    "heap/Heap.cpp",
    "heap/HeapCell.cpp",
    "heap/HeapCellType.cpp",
    "heap/HeapFinalizerCallback.cpp",
    "heap/HeapHelperPool.cpp",
    "heap/HeapProfiler.cpp",
    "heap/HeapSnapshot.cpp",
    "heap/HeapSnapshotBuilder.cpp",
    "heap/IncrementalSweeper.cpp",
    "heap/IsoAlignedMemoryAllocator.cpp",
    "heap/IsoCellSet.cpp",
    "heap/IsoHeapCellType.cpp",
    "heap/IsoMemoryAllocatorBase.cpp",
    "heap/IsoSubspace.cpp",
    "heap/IsoSubspacePerVM.cpp",
    "heap/JITStubRoutineSet.cpp",
    "heap/LocalAllocator.cpp",
    "heap/MachineStackMarker.cpp",
    "heap/MarkStack.cpp",
    "heap/MarkStackMergingConstraint.cpp",
    "heap/MarkedBlock.cpp",
    "heap/MarkedSpace.cpp",
    "heap/MarkingConstraint.cpp",
    "heap/MarkingConstraintSet.cpp",
    "heap/MarkingConstraintSolver.cpp",
    "heap/MutatorScheduler.cpp",
    "heap/MutatorState.cpp",
    "heap/PreciseAllocation.cpp",
    "heap/RootMarkReason.cpp",
    "heap/SimpleMarkingConstraint.cpp",
    "heap/SlotVisitor.cpp",
    "heap/SpaceTimeMutatorScheduler.cpp",
    "heap/StochasticSpaceTimeMutatorScheduler.cpp",
    "heap/StopIfNecessaryTimer.cpp",
    "heap/StructureAlignedMemoryAllocator.cpp",
    "heap/Subspace.cpp",
    "heap/SynchronousStopTheWorldMutatorScheduler.cpp",
    "heap/Synchronousness.cpp",
    "heap/VerifierSlotVisitor.cpp",
    "heap/VisitRaceKey.cpp",
    "heap/WeakBlock.cpp",
    "heap/WeakHandleOwner.cpp",
    "heap/WeakSet.cpp",
    "heap/WriteBarrierSupport.cpp",
    "inspector/AsyncStackTrace.cpp",
    "inspector/ConsoleMessage.cpp",
    "inspector/ContentSearchUtilities.cpp",
    "inspector/IdentifiersFactory.cpp",
    "inspector/InjectedScript.cpp",
    "inspector/InjectedScriptBase.cpp",
    "inspector/InjectedScriptHost.cpp",
    "inspector/InjectedScriptManager.cpp",
    "inspector/InjectedScriptModule.cpp",
    "inspector/InspectorAgentRegistry.cpp",
    "inspector/InspectorBackendDispatcher.cpp",
    "inspector/InspectorFrontendRouter.cpp",
    "inspector/InspectorTarget.cpp",
    "inspector/JSGlobalObjectConsoleClient.cpp",
    "inspector/JSGlobalObjectDebugger.cpp",
    "inspector/JSGlobalObjectInspectorController.cpp",
    "inspector/JSInjectedScriptHost.cpp",
    "inspector/JSInjectedScriptHostPrototype.cpp",
    "inspector/JSJavaScriptCallFrame.cpp",
    "inspector/JSJavaScriptCallFramePrototype.cpp",
    "inspector/JavaScriptCallFrame.cpp",
    "inspector/PerGlobalObjectWrapperWorld.cpp",
    "inspector/ScriptArguments.cpp",
    "inspector/ScriptCallFrame.cpp",
    "inspector/ScriptCallStack.cpp",
    "inspector/ScriptCallStackFactory.cpp",
    "inspector/ScriptFunctionCall.cpp",
    "inspector/agents/InspectorAgent.cpp",
    "inspector/agents/InspectorAuditAgent.cpp",
    "inspector/agents/InspectorConsoleAgent.cpp",
    "inspector/agents/InspectorDebuggerAgent.cpp",
    "inspector/agents/InspectorHeapAgent.cpp",
    "inspector/agents/InspectorRuntimeAgent.cpp",
    "inspector/agents/InspectorScriptProfilerAgent.cpp",
    "inspector/agents/InspectorTargetAgent.cpp",
    "inspector/agents/JSGlobalObjectAuditAgent.cpp",
    "inspector/agents/JSGlobalObjectDebuggerAgent.cpp",
    "inspector/agents/JSGlobalObjectRuntimeAgent.cpp",
    "interpreter/CLoopStack.cpp",
    "interpreter/CallFrame.cpp",
    "interpreter/Interpreter.cpp",
    "interpreter/ShadowChicken.cpp",
    "interpreter/StackVisitor.cpp",
    "jit/AssemblyHelpers.cpp",
    "jit/BaselineJITCode.cpp",
    "jit/BaselineJITPlan.cpp",
    "jit/BinarySwitch.cpp",
    "jit/CCallHelpers.cpp",
    "jit/CachedRecovery.cpp",
    "jit/CallFrameShuffleData.cpp",
    "jit/CallFrameShuffler.cpp",
    "jit/CallFrameShuffler32_64.cpp",
    "jit/CallFrameShuffler64.cpp",
    "jit/ExecutableAllocationFuzz.cpp",
    "jit/ExecutableAllocator.cpp",
    "jit/ExecutableMemoryHandle.cpp",
    "jit/GCAwareJITStubRoutine.cpp",
    "jit/GPRInfo.cpp",
    "jit/ICStats.cpp",
    "jit/JIT.cpp",
    "jit/JITAddGenerator.cpp",
    "jit/JITArithmetic.cpp",
    "jit/JITBitAndGenerator.cpp",
    "jit/JITBitOrGenerator.cpp",
    "jit/JITBitXorGenerator.cpp",
    "jit/JITCall.cpp",
    "jit/JITCode.cpp",
    "jit/JITCodeMap.cpp",
    "jit/JITCompilation.cpp",
    "jit/JITCompilationKey.cpp",
    "jit/JITCompilationMode.cpp",
    "jit/JITDisassembler.cpp",
    "jit/JITDivGenerator.cpp",
    "jit/JITExceptions.cpp",
    "jit/JITInlineCacheGenerator.cpp",
    "jit/JITLeftShiftGenerator.cpp",
    "jit/JITMulGenerator.cpp",
    "jit/JITNegGenerator.cpp",
    "jit/JITOpaqueByproducts.cpp",
    "jit/JITOpcodes.cpp",
    "jit/JITOpcodes32_64.cpp",
    "jit/JITOperations.cpp",
    "jit/JITPlan.cpp",
    "jit/JITPropertyAccess.cpp",
    "jit/JITRightShiftGenerator.cpp",
    "jit/JITSafepoint.cpp",
    "jit/JITSizeStatistics.cpp",
    "jit/JITStubRoutine.cpp",
    "jit/JITSubGenerator.cpp",
    "jit/JITTZoneImpls.cpp",
    "jit/JITThunks.cpp",
    "jit/JITToDFGDeferredCompilationCallback.cpp",
    "jit/JITWorklist.cpp",
    "jit/JITWorklistThread.cpp",
    "jit/PCToCodeOriginMap.cpp",
    "jit/PolymorphicCallStubRoutine.cpp",
    "jit/Reg.cpp",
    "jit/RegisterAtOffset.cpp",
    "jit/RegisterAtOffsetList.cpp",
    "jit/RegisterSet.cpp",
    "jit/SIMDInfo.cpp",
    "jit/ScratchRegisterAllocator.cpp",
    "jit/SetupVarargsFrame.cpp",
    "jit/SlowPathCall.cpp",
    "jit/TagRegistersMode.cpp",
    "jit/ThunkGenerators.cpp",
    "jit/Width.cpp",
    "llint/InPlaceInterpreter.cpp",
    "llint/LLIntCLoop.cpp",
    "llint/LLIntData.cpp",
    "llint/LLIntEntrypoint.cpp",
    "llint/LLIntExceptions.cpp",
    "llint/LLIntSlowPaths.cpp",
    "llint/LLIntThunks.cpp",
    "parser/Lexer.cpp",
    "parser/ModuleAnalyzer.cpp",
    "parser/Nodes.cpp",
    "parser/NodesAnalyzeModule.cpp",
    "parser/Parser.cpp",
    "parser/ParserArena.cpp",
    "parser/SourceProvider.cpp",
    "parser/SourceProviderCache.cpp",
    "parser/SourceTaintedOrigin.cpp",
    "parser/UnlinkedSourceCode.cpp",
    "parser/VariableEnvironment.cpp",
    "profiler/ProfilerBytecode.cpp",
    "profiler/ProfilerBytecodeSequence.cpp",
    "profiler/ProfilerBytecodes.cpp",
    "profiler/ProfilerCompilation.cpp",
    "profiler/ProfilerCompilationKind.cpp",
    "profiler/ProfilerCompiledBytecode.cpp",
    "profiler/ProfilerDatabase.cpp",
    "profiler/ProfilerEvent.cpp",
    "profiler/ProfilerJettisonReason.cpp",
    "profiler/ProfilerOSRExit.cpp",
    "profiler/ProfilerOSRExitSite.cpp",
    "profiler/ProfilerOrigin.cpp",
    "profiler/ProfilerOriginStack.cpp",
    "profiler/ProfilerProfiledBytecodes.cpp",
    "profiler/ProfilerTZoneImpls.cpp",
    "profiler/ProfilerUID.cpp",
    "runtime/AbstractModuleRecord.cpp",
    "runtime/AggregateError.cpp",
    "runtime/AggregateErrorConstructor.cpp",
    "runtime/AggregateErrorPrototype.cpp",
    "runtime/ArgList.cpp",
    "runtime/ArrayBuffer.cpp",
    "runtime/ArrayBufferView.cpp",
    "runtime/ArrayConstructor.cpp",
    "runtime/ArrayConventions.cpp",
    "runtime/ArrayIteratorPrototype.cpp",
    "runtime/ArrayPrototype.cpp",
    "runtime/AsyncFromSyncIteratorPrototype.cpp",
    "runtime/AsyncFunctionConstructor.cpp",
    "runtime/AsyncFunctionPrototype.cpp",
    "runtime/AsyncGeneratorFunctionConstructor.cpp",
    "runtime/AsyncGeneratorFunctionPrototype.cpp",
    "runtime/AsyncGeneratorPrototype.cpp",
    "runtime/AsyncIteratorPrototype.cpp",
    "runtime/AtomicsObject.cpp",
    "runtime/BasicBlockLocation.cpp",
    "runtime/BigIntConstructor.cpp",
    "runtime/BigIntObject.cpp",
    "runtime/BigIntPrototype.cpp",
    "runtime/BooleanConstructor.cpp",
    "runtime/BooleanObject.cpp",
    "runtime/BooleanPrototype.cpp",
    "runtime/BrandedStructure.cpp",
    "runtime/BufferMemoryHandle.cpp",
    "runtime/BytecodeCacheError.cpp",
    "runtime/CachePayload.cpp",
    "runtime/CacheUpdate.cpp",
    "runtime/CacheableIdentifier.cpp",
    "runtime/CachedBytecode.cpp",
    "runtime/CachedSpecialPropertyAdaptiveStructureWatchpoint.cpp",
    "runtime/CachedTypes.cpp",
    "runtime/CallData.cpp",
    "runtime/CatchScope.cpp",
    "runtime/ClassInfo.cpp",
    "runtime/ClonedArguments.cpp",
    "runtime/CodeCache.cpp",
    "runtime/CodeSpecializationKind.cpp",
    "runtime/CommonIdentifiers.cpp",
    "runtime/CommonSlowPaths.cpp",
    "runtime/CompilationResult.cpp",
    "runtime/Completion.cpp",
    "runtime/ConfigFile.cpp",
    "runtime/ConsoleClient.cpp",
    "runtime/ConsoleObject.cpp",
    "runtime/ConstantMode.cpp",
    "runtime/ConstructData.cpp",
    "runtime/ControlFlowProfiler.cpp",
    "runtime/CustomGetterSetter.cpp",
    "runtime/DOMAttributeGetterSetter.cpp",
    "runtime/DataView.cpp",
    "runtime/DateConstructor.cpp",
    "runtime/DateConversion.cpp",
    "runtime/DateInstance.cpp",
    "runtime/DatePrototype.cpp",
    "runtime/DeferredWorkTimer.cpp",
    "runtime/DirectArguments.cpp",
    "runtime/DirectArgumentsOffset.cpp",
    "runtime/DirectEvalExecutable.cpp",
    "runtime/DoublePredictionFuzzerAgent.cpp",
    "runtime/DumpContext.cpp",
    "runtime/ECMAMode.cpp",
    "runtime/Error.cpp",
    "runtime/ErrorConstructor.cpp",
    "runtime/ErrorHandlingScope.cpp",
    "runtime/ErrorInstance.cpp",
    "runtime/ErrorPrototype.cpp",
    "runtime/ErrorType.cpp",
    "runtime/EvalExecutable.cpp",
    "runtime/Exception.cpp",
    "runtime/ExceptionEventLocation.cpp",
    "runtime/ExceptionFuzz.cpp",
    "runtime/ExceptionHelpers.cpp",
    "runtime/ExceptionScope.cpp",
    "runtime/ExecutableBase.cpp",
    "runtime/FileBasedFuzzerAgent.cpp",
    "runtime/FileBasedFuzzerAgentBase.cpp",
    "runtime/FinalizationRegistryConstructor.cpp",
    "runtime/FinalizationRegistryPrototype.cpp",
    "runtime/FunctionConstructor.cpp",
    "runtime/FunctionExecutable.cpp",
    "runtime/FunctionExecutableDump.cpp",
    "runtime/FunctionHasExecutedCache.cpp",
    "runtime/FunctionPrototype.cpp",
    "runtime/FunctionRareData.cpp",
    "runtime/FuzzerAgent.cpp",
    "runtime/FuzzerPredictions.cpp",
    "runtime/GeneratorFunctionConstructor.cpp",
    "runtime/GeneratorFunctionPrototype.cpp",
    "runtime/GeneratorPrototype.cpp",
    "runtime/GetPutInfo.cpp",
    "runtime/GetterSetter.cpp",
    "runtime/GlobalExecutable.cpp",
    "runtime/HasOwnPropertyCache.cpp",
    "runtime/HashMapImpl.cpp",
    "runtime/ISO8601.cpp",
    "runtime/Identifier.cpp",
    "runtime/ImportMap.cpp",
    "runtime/IndexingType.cpp",
    "runtime/IndirectEvalExecutable.cpp",
    "runtime/InitializeThreading.cpp",
    "runtime/InternalFunction.cpp",
    "runtime/IntlCache.cpp",
    "runtime/IntlCollator.cpp",
    "runtime/IntlCollatorConstructor.cpp",
    "runtime/IntlCollatorPrototype.cpp",
    "runtime/IntlDateTimeFormat.cpp",
    "runtime/IntlDateTimeFormatConstructor.cpp",
    "runtime/IntlDateTimeFormatPrototype.cpp",
    "runtime/IntlDisplayNames.cpp",
    "runtime/IntlDisplayNamesConstructor.cpp",
    "runtime/IntlDisplayNamesPrototype.cpp",
    "runtime/IntlDurationFormat.cpp",
    "runtime/IntlDurationFormatConstructor.cpp",
    "runtime/IntlDurationFormatPrototype.cpp",
    "runtime/IntlListFormat.cpp",
    "runtime/IntlListFormatConstructor.cpp",
    "runtime/IntlListFormatPrototype.cpp",
    "runtime/IntlLocale.cpp",
    "runtime/IntlLocaleConstructor.cpp",
    "runtime/IntlLocalePrototype.cpp",
    "runtime/IntlNumberFormat.cpp",
    "runtime/IntlNumberFormatConstructor.cpp",
    "runtime/IntlNumberFormatPrototype.cpp",
    "runtime/IntlObject.cpp",
    "runtime/IntlPluralRules.cpp",
    "runtime/IntlPluralRulesConstructor.cpp",
    "runtime/IntlPluralRulesPrototype.cpp",
    "runtime/IntlRelativeTimeFormat.cpp",
    "runtime/IntlRelativeTimeFormatConstructor.cpp",
    "runtime/IntlRelativeTimeFormatPrototype.cpp",
    "runtime/IntlSegmentIterator.cpp",
    "runtime/IntlSegmentIteratorPrototype.cpp",
    "runtime/IntlSegmenter.cpp",
    "runtime/IntlSegmenterConstructor.cpp",
    "runtime/IntlSegmenterPrototype.cpp",
    "runtime/IntlSegments.cpp",
    "runtime/IntlSegmentsPrototype.cpp",
    "runtime/IntlWorkaround.cpp",
    "runtime/Intrinsic.cpp",
    "runtime/IteratorOperations.cpp",
    "runtime/IteratorPrototype.cpp",
    "runtime/JSArray.cpp",
    "runtime/JSArrayBuffer.cpp",
    "runtime/JSArrayBufferConstructor.cpp",
    "runtime/JSArrayBufferPrototype.cpp",
    "runtime/JSArrayBufferView.cpp",
    "runtime/JSArrayIterator.cpp",
    "runtime/JSAsyncFunction.cpp",
    "runtime/JSAsyncGenerator.cpp",
    "runtime/JSAsyncGeneratorFunction.cpp",
    "runtime/JSBigInt.cpp",
    "runtime/JSBoundFunction.cpp",
    "runtime/JSCBytecodeCacheVersion.cpp",
    "runtime/JSCConfig.cpp",
    "runtime/JSCJSValue.cpp",
    "runtime/JSCPtrTag.cpp",
    "runtime/JSCallee.cpp",
    "runtime/JSCell.cpp",
    "runtime/JSCustomGetterFunction.cpp",
    "runtime/JSCustomSetterFunction.cpp",
    "runtime/JSDataView.cpp",
    "runtime/JSDataViewPrototype.cpp",
    "runtime/JSDateMath.cpp",
    "runtime/JSDestructibleObjectHeapCellType.cpp",
    "runtime/JSFinalizationRegistry.cpp",
    "runtime/JSFunction.cpp",
    "runtime/JSGenerator.cpp",
    "runtime/JSGeneratorFunction.cpp",
    "runtime/JSGlobalLexicalEnvironment.cpp",
    "runtime/JSGlobalObject.cpp",
    "runtime/JSGlobalObjectDebuggable.cpp",
    "runtime/JSGlobalObjectFunctions.cpp",
    "runtime/JSGlobalProxy.cpp",
    "runtime/JSImmutableButterfly.cpp",
    "runtime/JSInternalPromise.cpp",
    "runtime/JSInternalPromiseConstructor.cpp",
    "runtime/JSInternalPromisePrototype.cpp",
    "runtime/JSLexicalEnvironment.cpp",
    "runtime/JSLock.cpp",
    "runtime/JSMap.cpp",
    "runtime/JSMapIterator.cpp",
    "runtime/JSMicrotask.cpp",
    "runtime/JSModuleEnvironment.cpp",
    "runtime/JSModuleLoader.cpp",
    "runtime/JSModuleNamespaceObject.cpp",
    "runtime/JSModuleRecord.cpp",
    "runtime/JSNativeStdFunction.cpp",
    "runtime/JSONObject.cpp",
    "runtime/JSObject.cpp",
    "runtime/JSPromise.cpp",
    "runtime/JSPromiseConstructor.cpp",
    "runtime/JSPromisePrototype.cpp",
    "runtime/JSPropertyNameEnumerator.cpp",
    "runtime/JSRemoteFunction.cpp",
    "runtime/JSRunLoopTimer.cpp",
    "runtime/JSScope.cpp",
    "runtime/JSScriptFetchParameters.cpp",
    "runtime/JSScriptFetcher.cpp",
    "runtime/JSSegmentedVariableObject.cpp",
    "runtime/JSSet.cpp",
    "runtime/JSSetIterator.cpp",
    "runtime/JSSourceCode.cpp",
    "runtime/JSString.cpp",
    "runtime/JSStringIterator.cpp",
    "runtime/JSStringJoiner.cpp",
    "runtime/JSSymbolTableObject.cpp",
    "runtime/JSTemplateObjectDescriptor.cpp",
    "runtime/JSType.cpp",
    "runtime/JSTypedArrayConstructors.cpp",
    "runtime/JSTypedArrayPrototypes.cpp",
    "runtime/JSTypedArrayViewConstructor.cpp",
    "runtime/JSTypedArrayViewPrototype.cpp",
    "runtime/JSTypedArrays.cpp",
    "runtime/JSWeakMap.cpp",
    "runtime/JSWeakObjectRef.cpp",
    "runtime/JSWeakSet.cpp",
    "runtime/JSWithScope.cpp",
    "runtime/JSWrapperObject.cpp",
    "runtime/LazyClassStructure.cpp",
    "runtime/LeafExecutable.cpp",
    "runtime/LiteralParser.cpp",
    "runtime/Lookup.cpp",
    "runtime/MapConstructor.cpp",
    "runtime/MapIteratorPrototype.cpp",
    "runtime/MapPrototype.cpp",
    "runtime/MatchResult.cpp",
    "runtime/MathCommon.cpp",
    "runtime/MathObject.cpp",
    "runtime/MegamorphicCache.cpp",
    "runtime/MemoryMode.cpp",
    "runtime/MemoryStatistics.cpp",
    "runtime/ModuleProgramExecutable.cpp",
    "runtime/NarrowingNumberPredictionFuzzerAgent.cpp",
    "runtime/NativeCallee.cpp",
    "runtime/NativeCalleeRegistry.cpp",
    "runtime/NativeErrorConstructor.cpp",
    "runtime/NativeErrorPrototype.cpp",
    "runtime/NativeExecutable.cpp",
    "runtime/NullGetterFunction.cpp",
    "runtime/NullSetterFunction.cpp",
    "runtime/NumberConstructor.cpp",
    "runtime/NumberObject.cpp",
    "runtime/NumberPredictionFuzzerAgent.cpp",
    "runtime/NumberPrototype.cpp",
    "runtime/ObjectConstructor.cpp",
    "runtime/ObjectInitializationScope.cpp",
    "runtime/ObjectPrototype.cpp",
    "runtime/Operations.cpp",
    "runtime/Options.cpp",
    "runtime/PageCount.cpp",
    "runtime/PredictionFileCreatingFuzzerAgent.cpp",
    "runtime/PrivateFieldPutKind.cpp",
    "runtime/ProgramExecutable.cpp",
    "runtime/PropertyDescriptor.cpp",
    "runtime/PropertySlot.cpp",
    "runtime/PropertyTable.cpp",
    "runtime/ProxyConstructor.cpp",
    "runtime/ProxyObject.cpp",
    "runtime/ProxyRevoke.cpp",
    "runtime/RandomizingFuzzerAgent.cpp",
    "runtime/ReflectObject.cpp",
    "runtime/RegExp.cpp",
    "runtime/RegExpCache.cpp",
    "runtime/RegExpCachedResult.cpp",
    "runtime/RegExpConstructor.cpp",
    "runtime/RegExpGlobalData.cpp",
    "runtime/RegExpMatchesArray.cpp",
    "runtime/RegExpObject.cpp",
    "runtime/RegExpPrototype.cpp",
    "runtime/RegExpStringIteratorPrototype.cpp",
    "runtime/RegisterTZoneTypes.cpp",
    "runtime/ResourceExhaustion.cpp",
    "runtime/RuntimeTZoneImpls.cpp",
    "runtime/RuntimeType.cpp",
    "runtime/SamplingCounter.cpp",
    "runtime/SamplingProfiler.cpp",
    "runtime/ScopeOffset.cpp",
    "runtime/ScopedArguments.cpp",
    "runtime/ScopedArgumentsTable.cpp",
    "runtime/ScriptExecutable.cpp",
    "runtime/SetConstructor.cpp",
    "runtime/SetIteratorPrototype.cpp",
    "runtime/SetPrototype.cpp",
    "runtime/ShadowRealmConstructor.cpp",
    "runtime/ShadowRealmObject.cpp",
    "runtime/ShadowRealmPrototype.cpp",
    "runtime/SideDataRepository.cpp",
    "runtime/SimpleTypedArrayController.cpp",
    "runtime/SmallStrings.cpp",
    "runtime/SparseArrayValueMap.cpp",
    "runtime/StackFrame.cpp",
    "runtime/StrictEvalActivation.cpp",
    "runtime/StringConstructor.cpp",
    "runtime/StringIteratorPrototype.cpp",
    "runtime/StringObject.cpp",
    "runtime/StringPrototype.cpp",
    "runtime/StringRecursionChecker.cpp",
    "runtime/Structure.cpp",
    "runtime/StructureCache.cpp",
    "runtime/StructureChain.cpp",
    "runtime/StructureRareData.cpp",
    "runtime/Symbol.cpp",
    "runtime/SymbolConstructor.cpp",
    "runtime/SymbolObject.cpp",
    "runtime/SymbolPrototype.cpp",
    "runtime/SymbolTable.cpp",
    "runtime/SyntheticModuleRecord.cpp",
    "runtime/TZoneInit.cpp",
    "runtime/TemplateObjectDescriptor.cpp",
    "runtime/TemporalCalendar.cpp",
    "runtime/TemporalCalendarConstructor.cpp",
    "runtime/TemporalCalendarPrototype.cpp",
    "runtime/TemporalDuration.cpp",
    "runtime/TemporalDurationConstructor.cpp",
    "runtime/TemporalDurationPrototype.cpp",
    "runtime/TemporalInstant.cpp",
    "runtime/TemporalInstantConstructor.cpp",
    "runtime/TemporalInstantPrototype.cpp",
    "runtime/TemporalNow.cpp",
    "runtime/TemporalObject.cpp",
    "runtime/TemporalPlainDate.cpp",
    "runtime/TemporalPlainDateConstructor.cpp",
    "runtime/TemporalPlainDatePrototype.cpp",
    "runtime/TemporalPlainDateTime.cpp",
    "runtime/TemporalPlainDateTimeConstructor.cpp",
    "runtime/TemporalPlainDateTimePrototype.cpp",
    "runtime/TemporalPlainTime.cpp",
    "runtime/TemporalPlainTimeConstructor.cpp",
    "runtime/TemporalPlainTimePrototype.cpp",
    "runtime/TemporalTimeZone.cpp",
    "runtime/TemporalTimeZoneConstructor.cpp",
    "runtime/TemporalTimeZonePrototype.cpp",
    "runtime/TestRunnerUtils.cpp",
    "runtime/ThrowScope.cpp",
    "runtime/TypeLocationCache.cpp",
    "runtime/TypeProfiler.cpp",
    "runtime/TypeProfilerLog.cpp",
    "runtime/TypeSet.cpp",
    "runtime/TypedArrayController.cpp",
    "runtime/TypedArrayType.cpp",
    "runtime/TypeofType.cpp",
    "runtime/VM.cpp",
    "runtime/VMEntryScope.cpp",
    "runtime/VMTraps.cpp",
    "runtime/VarOffset.cpp",
    "runtime/WaiterListManager.cpp",
    "runtime/Watchdog.cpp",
    "runtime/WeakMapConstructor.cpp",
    "runtime/WeakMapImpl.cpp",
    "runtime/WeakMapPrototype.cpp",
    "runtime/WeakObjectRefConstructor.cpp",
    "runtime/WeakObjectRefPrototype.cpp",
    "runtime/WeakSetConstructor.cpp",
    "runtime/WeakSetPrototype.cpp",
    "runtime/WideningNumberPredictionFuzzerAgent.cpp",
    "tools/CellList.cpp",
    "tools/CompilerTimingScope.cpp",
    "tools/FunctionAllowlist.cpp",
    "tools/FunctionOverrides.cpp",
    "tools/HeapVerifier.cpp",
    "tools/Integrity.cpp",
    "tools/JSDollarVM.cpp",
    "tools/VMInspector.cpp",
    "wasm/WasmBBQDisassembler.cpp",
    "wasm/WasmBBQJIT.cpp",
    "wasm/WasmBBQJIT32_64.cpp",
    "wasm/WasmBBQJIT64.cpp",
    "wasm/WasmBBQPlan.cpp",
    "wasm/WasmBinding.cpp",
    "wasm/WasmBranchHintsSectionParser.cpp",
    "wasm/WasmCallee.cpp",
    "wasm/WasmCalleeGroup.cpp",
    "wasm/WasmCallingConvention.cpp",
    "wasm/WasmCallsiteCollection.cpp",
    "wasm/WasmCompilationContext.cpp",
    "wasm/WasmCompilationMode.cpp",
    "wasm/WasmConstExprGenerator.cpp",
    "wasm/WasmContext.cpp",
    "wasm/WasmEntryPlan.cpp",
    "wasm/WasmFaultSignalHandler.cpp",
    "wasm/WasmFormat.cpp",
    "wasm/WasmFunctionCodeBlockGenerator.cpp",
    "wasm/WasmFunctionIPIntMetadataGenerator.cpp",
    "wasm/WasmGlobal.cpp",
    "wasm/WasmHandlerInfo.cpp",
    "wasm/WasmIPIntGenerator.cpp",
    "wasm/WasmIPIntPlan.cpp",
    "wasm/WasmIPIntSlowPaths.cpp",
    "wasm/WasmIndexOrName.cpp",
    "wasm/WasmInstance.cpp",
    "wasm/WasmInstance.h",
    "wasm/WasmLLIntGenerator.cpp",
    "wasm/WasmLLIntPlan.cpp",
    "wasm/WasmLLIntTierUpCounter.cpp",
    "wasm/WasmMachineThreads.cpp",
    "wasm/WasmMemory.cpp",
    "wasm/WasmMemoryInformation.cpp",
    "wasm/WasmModule.cpp",
    "wasm/WasmModuleInformation.cpp",
    "wasm/WasmNameSectionParser.cpp",
    "wasm/WasmOMGIRGenerator.cpp",
    "wasm/WasmOMGPlan.cpp",
    "wasm/WasmOSREntryPlan.cpp",
    "wasm/WasmOpcodeCounter.cpp",
    "wasm/WasmOpcodeOrigin.cpp",
    "wasm/WasmOperations.cpp",
    "wasm/WasmPlan.cpp",
    "wasm/WasmSectionParser.cpp",
    "wasm/WasmSlowPaths.cpp",
    "wasm/WasmStreamingCompiler.cpp",
    "wasm/WasmStreamingParser.cpp",
    "wasm/WasmStreamingPlan.cpp",
    "wasm/WasmTZoneImpls.cpp",
    "wasm/WasmTable.cpp",
    "wasm/WasmTag.cpp",
    "wasm/WasmThunks.cpp",
    "wasm/WasmTierUpCount.cpp",
    "wasm/WasmTypeDefinition.cpp",
    "wasm/WasmValueLocation.cpp",
    "wasm/WasmWorklist.cpp",
    "wasm/js/JSToWasm.cpp",
    "wasm/js/JSToWasm.h",
    "wasm/js/JSWebAssembly.cpp",
    "wasm/js/JSWebAssemblyArray.cpp",
    "wasm/js/JSWebAssemblyCompileError.cpp",
    "wasm/js/JSWebAssemblyException.cpp",
    "wasm/js/JSWebAssemblyGlobal.cpp",
    "wasm/js/JSWebAssemblyInstance.cpp",
    "wasm/js/JSWebAssemblyLinkError.cpp",
    "wasm/js/JSWebAssemblyMemory.cpp",
    "wasm/js/JSWebAssemblyModule.cpp",
    "wasm/js/JSWebAssemblyRuntimeError.cpp",
    "wasm/js/JSWebAssemblyStruct.cpp",
    "wasm/js/JSWebAssemblyTable.cpp",
    "wasm/js/JSWebAssemblyTag.cpp",
    "wasm/js/WasmToJS.cpp",
    "wasm/js/WasmToJS.h",
    "wasm/js/WebAssemblyArrayConstructor.cpp",
    "wasm/js/WebAssemblyArrayPrototype.cpp",
    "wasm/js/WebAssemblyCompileErrorConstructor.cpp",
    "wasm/js/WebAssemblyCompileErrorPrototype.cpp",
    "wasm/js/WebAssemblyExceptionConstructor.cpp",
    "wasm/js/WebAssemblyExceptionPrototype.cpp",
    "wasm/js/WebAssemblyFunction.cpp",
    "wasm/js/WebAssemblyFunctionBase.cpp",
    "wasm/js/WebAssemblyGCObjectBase.cpp",
    "wasm/js/WebAssemblyGlobalConstructor.cpp",
    "wasm/js/WebAssemblyGlobalPrototype.cpp",
    "wasm/js/WebAssemblyInstanceConstructor.cpp",
    "wasm/js/WebAssemblyInstancePrototype.cpp",
    "wasm/js/WebAssemblyLinkErrorConstructor.cpp",
    "wasm/js/WebAssemblyLinkErrorPrototype.cpp",
    "wasm/js/WebAssemblyMemoryConstructor.cpp",
    "wasm/js/WebAssemblyMemoryPrototype.cpp",
    "wasm/js/WebAssemblyModuleConstructor.cpp",
    "wasm/js/WebAssemblyModulePrototype.cpp",
    "wasm/js/WebAssemblyModuleRecord.cpp",
    "wasm/js/WebAssemblyRuntimeErrorConstructor.cpp",
    "wasm/js/WebAssemblyRuntimeErrorPrototype.cpp",
    "wasm/js/WebAssemblyStructConstructor.cpp",
    "wasm/js/WebAssemblyStructPrototype.cpp",
    "wasm/js/WebAssemblyTableConstructor.cpp",
    "wasm/js/WebAssemblyTablePrototype.cpp",
    "wasm/js/WebAssemblyTagConstructor.cpp",
    "wasm/js/WebAssemblyTagPrototype.cpp",
    "wasm/js/WebAssemblyWrapperFunction.cpp",
    "yarr/RegularExpression.cpp",
    "yarr/YarrCanonicalizeUCS2.cpp",
    "yarr/YarrDisassembler.cpp",
    "yarr/YarrErrorCode.cpp",
    "yarr/YarrFlags.cpp",
    "yarr/YarrInterpreter.cpp",
    "yarr/YarrJIT.cpp",
    "yarr/YarrPattern.cpp",
    "yarr/YarrSyntaxChecker.cpp",
    "yarr/YarrTZoneImpls.cpp",
    "yarr/YarrUnicodeProperties.cpp",
  ]

  sources += [ rebase_path(bytecode_dumper, ".") ]
  sources += rebase_path(inspector_cpp_files, ".")

  generated_files = get_target_outputs(":yarr_canonicalize_unicode_generator") +
                    get_target_outputs(":js_builtin")

  sources += rebase_path(generated_files, ".")

  deps = [
    ":air_opcode",
    ":bytecodes",
    ":hash_lut",
    ":inspector_protocol_bindings_generator",
    ":js_builtin",
    ":jsc_public_headers",
    ":keyword_lookup_generator",
    ":lexer_lut",
    ":low_level_interpreter",
    ":reg_exp_jit_tables_generator",
    ":unicode_pattern_tables_generator",
    ":wasm_omgir_generator_inlines",
    ":wasm_op",
    ":yarr_canonicalize_unicode_generator",
    "//Source/WTF/wtf",
    "//build:cmake_buildflags",
    "//third_party/icu",
  ]

  if (!use_system_malloc) {
    deps += [ "//Source/bmalloc" ]
  }

  include_dirs = [
    "$target_gen_dir",
    "$root_gen_dir/build",
    "//Source/JavaScriptCore",
    "//Source/JavaScriptCore/runtime",
    "//Source/WTF",
    "//Source/JavaScriptCore/API",
    "//Source/JavaScriptCore/assembler",
    "//Source/JavaScriptCore/b3",
    "//Source/JavaScriptCore/b3/air",
    "//Source/JavaScriptCore/bindings",
    "//Source/JavaScriptCore/builtins",
    "//Source/JavaScriptCore/bytecode",
    "//Source/JavaScriptCore/bytecompiler",
    "//Source/JavaScriptCore/dfg",
    "//Source/JavaScriptCore/disassembler",
    "//Source/JavaScriptCore/disassembler/ARM64",
    "//Source/JavaScriptCore/disassembler/zydis/Zydis",
    "//Source/JavaScriptCore/domjit",
    "//Source/JavaScriptCore/ftl",
    "//Source/JavaScriptCore/fuzzilli",
    "//Source/JavaScriptCore/heap",
    "//Source/JavaScriptCore/debugger",
    "//Source/JavaScriptCore/inspector",
    "//Source/JavaScriptCore/inspector/agents",
    "//Source/JavaScriptCore/inspector/augmentable",
    "//Source/JavaScriptCore/inspector/remote",
    "//Source/JavaScriptCore/interpreter",
    "//Source/JavaScriptCore/jit",
    "//Source/JavaScriptCore/llint",
    "//Source/JavaScriptCore/parser",
    "//Source/JavaScriptCore/profiler",
    "//Source/JavaScriptCore/runtime",
    "//Source/JavaScriptCore/tools",
    "//Source/JavaScriptCore/wasm",
    "//Source/JavaScriptCore/wasm/js",
    "//Source/JavaScriptCore/yarr",
    "//Source/JavaScriptCore",
    "//Source/JavaScriptCore/inspector",
    "//Source/JavaScriptCore/runtime",
    "//Source/JavaScriptCore/yarr",
    "$target_gen_dir/inspector",
    "$target_gen_dir/runtime",
    "$target_gen_dir/yarr",
  ]

  configs -= [
    "//build/config/compiler:chromium_code",
    "//build/config/clang:extra_warnings",
    "//build/config/compiler:compiler_deterministic",
  ]
  configs += [ "//build/config/compiler:no_chromium_code" ]

  if (use_glib) {
    sources += [
      "API/JSRemoteInspector.cpp",
      "inspector/remote/RemoteAutomationTarget.cpp",
      "inspector/remote/RemoteConnectionToTarget.cpp",
      "inspector/remote/RemoteControllableTarget.cpp",
      "inspector/remote/RemoteInspectionTarget.cpp",
      "inspector/remote/RemoteInspector.cpp",
      "inspector/remote/glib/RemoteInspectorGlib.cpp",
      "inspector/remote/glib/RemoteInspectorServer.cpp",
      "inspector/remote/glib/RemoteInspectorUtils.cpp",
    ]

    configs += [ "//build/config/linux:glib" ]
  }

  defines = [ "BUILDING_JavaScriptCore" ]
}
